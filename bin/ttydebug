#!/usr/bin/env node
// -*- mode: javascript -*-
// vi: set ft=javascript :
'use strict';

// Parse Arguments and set defaults
var minimist = require('minimist');
// My own hacked keypress for now
var keypress = require('../lib/keypress');

var argv = require('minimist')(process.argv.slice(2));

var shell = argv.e || process.env.SHELL;
var shellParse = require('shell-quote').parse;
var shellCmd = shellParse(shell)[0];
var shellArgs = shellParse(shell).slice(1);

var socketPath = argv._[0] || '/tmp/ttydebug';

function help() {
  var man = [
    'usage: ttydebug [-e command] [socket-path]',
    '    socket-path: default = /tmp/ttydebug',
    '    command : command to execute . default = $SHELL'
  ];
  console.log(man.join('\n'));
  process.exit(0);
}

// Prepare pty
var pty = require('pty.js');

var ps1 = '(\\[\\033[5;31m\\]*\\[\\033[0m\\])';
var penv = JSON.parse(JSON.stringify(process.env));
var nps1 = [ ps1 , process.env.PS1 ].join('');
penv.PS1 = nps1;
penv.SHELL = shell;

var settings = {
  cols: process.stdout.columns,
  rows: process.stdout.rows,
  cwd: process.cwd(),
  command: shellCmd,
  commandArgs: shellArgs,
  env: penv
};

var _pty = pty.spawn(settings.command , settings.commandArgs, {
  cmd: settings.cwd,
  env: settings.env,
  cols: settings.cols,
  rows: settings.rows
});

_pty.on('end', function (data) {
  process.exit();
});

_pty.setEncoding('utf8');

var net = require('net');

// Connect to socket
var socket = net.createConnection(socketPath);
socket.setEncoding('utf8');

socket.on('error', function(err) {
  console.error('Error connecting to socket', socketPath, ':', err);
  process.exit(-1);
});

// Connect stdin to pty
process.stdin.pipe(_pty);

keypress(process.stdin);

if (typeof process.stdin.setRawMode === 'function') {
    process.stdin.setRawMode(true);
}

// Note we have to listen for keypress otherwise we don't detect mousepresses
process.stdin.on('keypress', function (c, key) {
  //console.log(0,c, key);
});

process.stdout.on('resize', function () {
  var resize = {
    cols: process.stdout.columns,
    rows: process.stdout.rows,
    type: 'resize'
  };
  _pty.resize(process.stdout.columns, process.stdout.rows);
  socket.write(JSON.stringify(resize)+'\n');
});

process.stdin.on('mousepress', function (mouse) {
  //console.log(mouse);
  socket.write(JSON.stringify(mouse)+'\n');
});

// Bracketed Paste mode 
// http://stackoverflow.com/questions/5585129/pasting-code-into-terminal-window-into-vim-on-mac-os-x/7053522#7053522
// http://cirw.in/blog/bracketed-paste 
process.stdin.on('data', function (data) {
  socket.write(JSON.stringify({ type: 'stdin', data: data })+'\n');
});

//keypress.enableMouse(_pty);

// Output pty to stdout
_pty.pipe(process.stdout);

var TerminalParser = require('../index.js');
var opcodes = new TerminalParser.OpcodeStream({ stringify: false });
opcodes.on('error', function(err) {
  console.error('Error with opcodes', err);
  process.exit(-1);
});

var cursor = new TerminalParser.BufferStream({ stringify: false });

// Prepare output formatter
var colors = require('colors');

var formatter = function(chunk, encoding) {
  var jsonString = JSON.stringify(chunk);

  if (jsonString === undefined) {
        return JSON.stringify('something ugly happened').underline +'\n';
  }

  if (chunk.type === 'OP') {
    return jsonString.green +'\n';
  } else {
    if (chunk.type === 'text') {
      return jsonString.blue +'\n';
    } else {
      return JSON.stringify(chunk).red +'\n';
    }
  }
};

opcodes.addTransformation(formatter);

var formatter2 = function(chunk, encoding) {
    return JSON.stringify(chunk).yellow +'\n';
};

cursor.addTransformation(formatter2);

_pty.pipe(opcodes).pipe(socket);
_pty.pipe(cursor).pipe(socket);
